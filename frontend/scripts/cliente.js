// Autogenerated by AcruxDevelopment's ApiGenerator.
// This tool was created to help with the generation of javascript classes for consuming PHP APIs.
// AcruxDevelopment - ITSP - 2025
// See https://github.com/AcruxDevelopment/ApiGenerator


/** Offers API client classes. */
/** API calls for "Aulas" related endpoints. */
class Aulas
{
    /**
    * Calls the Aulas's "register" endpoint using POST method and the arguments 'codigo', 'proposito' and 'cantidadSillas' as form data.
    * @param codigo The value for the 'codigo' form field
    * @param proposito The value for the 'proposito' form field
    * @param cantidadSillas The value for the 'cantidadSillas' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(codigo, proposito, cantidadSillas)
    {
        let formData = new FormData();
        formData.append('codigo', codigo);
        formData.append('proposito', proposito);
        formData.append('cantidadSillas', cantidadSillas);
        return await registerWith(formData);
    }

    /**
    * Calls the Aulas's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/aulas/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Bloques" related endpoints. */
class Bloques
{
    /**
    * Calls the Bloques's "register" endpoint using POST method and the arguments 'id_grupo', 'id_clase', 'id_aula' and 'id_hora' as form data.
    * @param id_grupo The value for the 'id_grupo' form field
    * @param id_clase The value for the 'id_clase' form field
    * @param id_aula The value for the 'id_aula' form field
    * @param id_hora The value for the 'id_hora' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(id_grupo, id_clase, id_aula, id_hora)
    {
        let formData = new FormData();
        formData.append('id_grupo', id_grupo);
        formData.append('id_clase', id_clase);
        formData.append('id_aula', id_aula);
        formData.append('id_hora', id_hora);
        return await registerWith(formData);
    }

    /**
    * Calls the Bloques's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/bloques/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Clases" related endpoints. */
class Clases
{
    /**
    * Calls the Clases's "register" endpoint using POST method and the arguments 'id_profesor' and 'id_materia' as form data.
    * @param id_profesor The value for the 'id_profesor' form field
    * @param id_materia The value for the 'id_materia' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(id_profesor, id_materia)
    {
        let formData = new FormData();
        formData.append('id_profesor', id_profesor);
        formData.append('id_materia', id_materia);
        return await registerWith(formData);
    }

    /**
    * Calls the Clases's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/clases/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Cursos" related endpoints. */
class Cursos
{
    /**
    * Calls the Cursos's "register" endpoint using POST method and the arguments 'nombre' and 'duracionAnios' as form data.
    * @param nombre The value for the 'nombre' form field
    * @param duracionAnios The value for the 'duracionAnios' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(nombre, duracionAnios)
    {
        let formData = new FormData();
        formData.append('nombre', nombre);
        formData.append('duracionAnios', duracionAnios);
        return await registerWith(formData);
    }

    /**
    * Calls the Cursos's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/cursos/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Grupos" related endpoints. */
class Grupos
{
    /**
    * Calls the Grupos's "register" endpoint using POST method and the arguments 'codigo', 'id_curso' and 'id_adscripta' as form data.
    * @param codigo The value for the 'codigo' form field
    * @param id_curso The value for the 'id_curso' form field
    * @param id_adscripta The value for the 'id_adscripta' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(codigo, id_curso, id_adscripta)
    {
        let formData = new FormData();
        formData.append('codigo', codigo);
        formData.append('id_curso', id_curso);
        formData.append('id_adscripta', id_adscripta);
        return await registerWith(formData);
    }

    /**
    * Calls the Grupos's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/grupos/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Horas" related endpoints. */
class Horas
{
    /**
    * Calls the Horas's "generate" endpoint using POST method and the arguments  as form data.

    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async generate()
    {
        let formData = new FormData();

        return await generateWith(formData);
    }

    /**
    * Calls the Horas's "generate" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async generateWith(formData)
    {
        let endpointPath = '/backend/api/horas/generate.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Intervalos" related endpoints. */
class Intervalos
{
    /**
    * Calls the Intervalos's "registermultiple" endpoint using POST method and the arguments 'horaEntrada', 'horaCierre', 'duracionHoraMinutos' and 'duracionRecreoMinutos' as form data.
    * @param horaEntrada The value for the 'horaEntrada' form field
    * @param horaCierre The value for the 'horaCierre' form field
    * @param duracionHoraMinutos The value for the 'duracionHoraMinutos' form field
    * @param duracionRecreoMinutos The value for the 'duracionRecreoMinutos' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registermultiple(horaEntrada, horaCierre, duracionHoraMinutos, duracionRecreoMinutos)
    {
        let formData = new FormData();
        formData.append('horaEntrada', horaEntrada);
        formData.append('horaCierre', horaCierre);
        formData.append('duracionHoraMinutos', duracionHoraMinutos);
        formData.append('duracionRecreoMinutos', duracionRecreoMinutos);
        return await registermultipleWith(formData);
    }

    /**
    * Calls the Intervalos's "registermultiple" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registermultipleWith(formData)
    {
        let endpointPath = '/backend/api/intervalos/registerMultiple.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Materias" related endpoints. */
class Materias
{
    /**
    * Calls the Materias's "register" endpoint using POST method and the arguments 'nombre' as form data.
    * @param nombre The value for the 'nombre' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(nombre)
    {
        let formData = new FormData();
        formData.append('nombre', nombre);
        return await registerWith(formData);
    }

    /**
    * Calls the Materias's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/materias/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Recursoexterno" related endpoints. */
class Recursoexterno
{
    /**
    * Calls the Recursoexterno's "register" endpoint using POST method and the arguments 'tipo', 'id_aula' and 'cantidad' as form data.
    * @param tipo The value for the 'tipo' form field
    * @param id_aula The value for the 'id_aula' form field
    * @param cantidad The value for the 'cantidad' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(tipo, id_aula, cantidad)
    {
        let formData = new FormData();
        formData.append('tipo', tipo);
        formData.append('id_aula', id_aula);
        formData.append('cantidad', cantidad);
        return await registerWith(formData);
    }

    /**
    * Calls the Recursoexterno's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/recursoexterno/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Recursointerno" related endpoints. */
class Recursointerno
{
    /**
    * Calls the Recursointerno's "register" endpoint using POST method and the arguments 'tipo', 'id_aula' and 'cantidad' as form data.
    * @param tipo The value for the 'tipo' form field
    * @param id_aula The value for the 'id_aula' form field
    * @param cantidad The value for the 'cantidad' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(tipo, id_aula, cantidad)
    {
        let formData = new FormData();
        formData.append('tipo', tipo);
        formData.append('id_aula', id_aula);
        formData.append('cantidad', cantidad);
        return await registerWith(formData);
    }

    /**
    * Calls the Recursointerno's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/recursointerno/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Reservas" related endpoints. */
class Reservas
{
    /**
    * Calls the Reservas's "register" endpoint using POST method and the arguments 'id_hora_inicio', 'id_hora_final' and 'id_aula' as form data.
    * @param id_hora_inicio The value for the 'id_hora_inicio' form field
    * @param id_hora_final The value for the 'id_hora_final' form field
    * @param id_aula The value for the 'id_aula' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(id_hora_inicio, id_hora_final, id_aula)
    {
        let formData = new FormData();
        formData.append('id_hora_inicio', id_hora_inicio);
        formData.append('id_hora_final', id_hora_final);
        formData.append('id_aula', id_aula);
        return await registerWith(formData);
    }

    /**
    * Calls the Reservas's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/reservas/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "TelefonoPersona" related endpoints. */
class TelefonoPersona
{
    /**
    * Calls the TelefonoPersona's "register" endpoint using POST method and the arguments 'telefono' and 'id_persona' as form data.
    * @param telefono The value for the 'telefono' form field
    * @param id_persona The value for the 'id_persona' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async register(telefono, id_persona)
    {
        let formData = new FormData();
        formData.append('telefono', telefono);
        formData.append('id_persona', id_persona);
        return await registerWith(formData);
    }

    /**
    * Calls the TelefonoPersona's "register" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async registerWith(formData)
    {
        let endpointPath = '/backend/api/telefono_persona/register.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "Users" related endpoints. */
class Users
{
    /**
    * Calls the Users's "login" endpoint using POST method and the arguments 'DNI' and 'password' as form data.
    * @param DNI The value for the 'DNI' form field
    * @param password The value for the 'password' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async login(DNI, password)
    {
        let formData = new FormData();
        formData.append('DNI', DNI);
        formData.append('password', password);
        return await loginWith(formData);
    }

    /**
    * Calls the Users's "login" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async loginWith(formData)
    {
        let endpointPath = '/backend/api/users/login.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
    /**
    * Calls the Users's "signup" endpoint using POST method and the arguments 'nombre', 'apellido', 'dni', 'email', 'contrasena', 'rol', 'telefonos', 'id_cargos' and 'id_grupo' as form data.
    * @param nombre The value for the 'nombre' form field
    * @param apellido The value for the 'apellido' form field
    * @param dni The value for the 'dni' form field
    * @param email The value for the 'email' form field
    * @param contrasena The value for the 'contrasena' form field
    * @param rol The value for the 'rol' form field
    * @param telefonos The value for the 'telefonos' form field
    * @param id_cargos The value for the 'id_cargos' form field
    * @param id_grupo The value for the 'id_grupo' form field
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async signup(nombre, apellido, dni, email, contrasena, rol, telefonos, id_cargos, id_grupo)
    {
        let formData = new FormData();
        formData.append('nombre', nombre);
        formData.append('apellido', apellido);
        formData.append('dni', dni);
        formData.append('email', email);
        formData.append('contrasena', contrasena);
        formData.append('rol', rol);
        formData.append('telefonos', telefonos);
        formData.append('id_cargos', id_cargos);
        formData.append('id_grupo', id_grupo);
        return await signupWith(formData);
    }

    /**
    * Calls the Users's "signup" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async signupWith(formData)
    {
        let endpointPath = '/backend/api/users/signup.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}

/** API calls for "_uth" related endpoints. */
class _uth
{
    /**
    * Calls the _uth's "redirects" endpoint using POST method and the arguments  as form data.

    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async redirects()
    {
        let formData = new FormData();

        return await redirectsWith(formData);
    }

    /**
    * Calls the _uth's "redirects" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async redirectsWith(formData)
    {
        let endpointPath = '/backend/api/_auth/redirects.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
    /**
    * Calls the _uth's "roles" endpoint using POST method and the arguments  as form data.

    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async roles()
    {
        let formData = new FormData();

        return await rolesWith(formData);
    }

    /**
    * Calls the _uth's "roles" endpoint using POST method and the given form data.
    * @param formData The FormData object containing the form fields to send.
    * @returns A Promise that resolves to the Response object from the fetch call.
    */
    static async rolesWith(formData)
    {
        let endpointPath = '/backend/api/_auth/roles.php';
        const response = await fetch(endpointPath, {
            method: 'POST',
            body: formData
        });

        return response;
    }
}